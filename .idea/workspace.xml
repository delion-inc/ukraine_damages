<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="1efa4fc1-ed94-4f01-9436-7b91c4b64be2" name="Changes" comment="Integrate search engine api.&#10;added test controller *SerperController*">
      <change afterPath="$PROJECT_DIR$/server/src/main/resources/db/changelog/master/00003-changelog-insert-sample-data.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/certbot/conf/accounts/acme-v02.api.letsencrypt.org/directory/44ebb2edcc2b740177395aeaec45bdd3/meta.json" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/certbot/conf/accounts/acme-v02.api.letsencrypt.org/directory/44ebb2edcc2b740177395aeaec45bdd3/private_key.json" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/certbot/conf/accounts/acme-v02.api.letsencrypt.org/directory/44ebb2edcc2b740177395aeaec45bdd3/regr.json" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/docker-compose.yml" beforeDir="false" afterPath="$PROJECT_DIR$/docker-compose.yml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/init-letsencrypt.sh" beforeDir="false" afterPath="$PROJECT_DIR$/init-letsencrypt.sh" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/nginx/conf.d/app.conf" beforeDir="false" />
      <change beforePath="$PROJECT_DIR$/nginx/nginx.conf" beforeDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Interface" />
        <option value="Class" />
        <option value="Dockerfile" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="GitHubPullRequestSearchHistory"><![CDATA[{
  "lastFilter": {
    "state": "OPEN",
    "assignee": "OneMan3121"
  }
}]]></component>
  <component name="GithubPullRequestsUISettings"><![CDATA[{
  "selectedUrlAndAccountId": {
    "url": "https://github.com/delion-inc/ukraine_damages.git",
    "accountId": "e9cfd00c-a0cb-4c87-853d-1009411d64db"
  }
}]]></component>
  <component name="KubernetesApiPersistence"><![CDATA[{}]]></component>
  <component name="KubernetesApiProvider"><![CDATA[{
  "isMigrated": true
}]]></component>
  <component name="ProjectColorInfo"><![CDATA[{
  "customColor": "",
  "associatedIndex": 5
}]]></component>
  <component name="ProjectId" id="2wGzZIXjMjlbxftDzPFNdKtZAOL" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "Docker.Proda.executor": "Run",
    "Docker.Unnamed.executor": "Run",
    "Docker.ai_service.web: Compose Deployment.executor": "Run",
    "Docker.ai_service/Dockerfile.executor": "Run",
    "Docker.ai_service: Compose Deployment.executor": "Run",
    "Docker.client/Dockerfile.executor": "Run",
    "Docker.docker-compose.yml.ai_service: Compose Deployment.executor": "Run",
    "Docker.docker-compose.yml.backend: Compose Deployment.executor": "Run",
    "Docker.docker-compose.yml.certbot: Compose Deployment.executor": "Run",
    "Docker.docker-compose.yml.db: Compose Deployment.executor": "Run",
    "Docker.docker-compose.yml.frontend: Compose Deployment.executor": "Run",
    "Docker.docker-compose.yml.nginx: Compose Deployment.executor": "Run",
    "Docker.docker-compose.yml: Compose Deployment (1).executor": "Run",
    "Docker.docker-compose.yml: Compose Deployment (2).executor": "Run",
    "Docker.docker-compose.yml: Compose Deployment.executor": "Run",
    "HTTP Request.UkrDamageReportApplication | #1.executor": "Run",
    "HTTP Request.UkrDamageReportApplication | Пошук з параметром.executor": "Run",
    "HTTP Request.UkrDamageReportApplication | Пошук з порожнім параметром (має повернути 400 Bad Request).executor": "Run",
    "HTTP Request.UkrDamageReportApplication | Пошук з пробілами (має додати слово \"destruction\").executor": "Run",
    "HTTP Request.UkrDamageReportApplication | Пошук зі словом \"destruction\" (не має додавати слово повторно).executor": "Run",
    "HTTP Request.UkrDamageReportApplication | Правильний запит.executor": "Run",
    "HTTP Request.UkrDamageReportApplication | Тестовий запит з деталями.executor": "Run",
    "ModuleVcsDetector.initialDetectionPerformed": "true",
    "Node.js.Unnamed.executor": "Run",
    "RequestMappingsPanelOrder0": "0",
    "RequestMappingsPanelOrder1": "1",
    "RequestMappingsPanelWidth0": "75",
    "RequestMappingsPanelWidth1": "75",
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "RunOnceActivity.git.unshallow": "true",
    "SHELLCHECK.PATH": "C:\\Users\\New\\AppData\\Roaming\\JetBrains\\IntelliJIdea2025.1\\plugins\\Shell Script\\shellcheck.exe",
    "Spring Boot.UkrDamageReportApplication.executor": "Run",
    "git-widget-placeholder": "develop",
    "last_opened_file_path": "C:/Users/New/Documents/WorkSpace/ukraine_damages/server/src/main/resources/db/changelog/master",
    "node.js.detected.package.eslint": "true",
    "node.js.detected.package.tslint": "true",
    "node.js.selected.package.eslint": "(autodetect)",
    "node.js.selected.package.tslint": "(autodetect)",
    "nodejs_interpreter_path": "C:/Users/New/AppData/Roaming/JetBrains/IntelliJIdea2025.1/node/versions/22.15.0/node",
    "nodejs_package_manager_path": "npm",
    "project.structure.last.edited": "Modules",
    "project.structure.proportion": "0.0",
    "project.structure.side.proportion": "0.0",
    "vue.rearranger.settings.migration": "true"
  },
  "keyToStringList": {
    "DatabaseDriversLRU": [
      "mysql",
      "oracle"
    ]
  }
}]]></component>
  <component name="RecentsManager">
    <key name="CopyFile.RECENT_KEYS">
      <recent name="C:\Users\New\Documents\WorkSpace\ukraine_damages\server\src\main\resources\db\changelog\master" />
    </key>
    <key name="MoveFile.RECENT_KEYS">
      <recent name="C:\Users\New\Documents\WorkSpace\ukraine_damages" />
    </key>
  </component>
  <component name="RunDashboard">
    <option name="excludedTypes">
      <set>
        <option value="HttpClient.HttpRequestRunConfigurationType" />
      </set>
    </option>
  </component>
  <component name="RunManager" selected="Docker.docker-compose.yml: Compose Deployment (2)">
    <configuration name="Unnamed" type="NodeJSConfigurationType" nameIsGenerated="true" working-dir="$PROJECT_DIR$">
      <method v="2" />
    </configuration>
    <configuration name="UkrDamageReportApplication" type="SpringBootApplicationConfigurationType" factoryName="Spring Boot" nameIsGenerated="true">
      <module name="ukr-damage-report" />
      <option name="SPRING_BOOT_MAIN_CLASS" value="com.example.ukrdamagereport.UkrDamageReportApplication" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="Proda" type="docker-deploy" factoryName="docker-compose.yml" server-name="Delion Server">
      <deployment type="docker-compose.yml">
        <settings>
          <option name="envFilePath" value="" />
          <option name="sourceFilePath" value="docker-compose.yml" />
        </settings>
      </deployment>
      <method v="2" />
    </configuration>
    <configuration default="true" type="docker-deploy" factoryName="docker-compose.yml" temporary="true">
      <deployment type="docker-compose.yml" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="docker-deploy" factoryName="dockerfile" temporary="true">
      <deployment type="dockerfile" />
      <method v="2" />
    </configuration>
    <configuration name="docker-compose.yml: Compose Deployment (1)" type="docker-deploy" factoryName="docker-compose.yml" temporary="true" server-name="Docker">
      <deployment type="docker-compose.yml">
        <settings>
          <option name="sourceFilePath" value="docker-compose.yml" />
        </settings>
      </deployment>
      <method v="2" />
    </configuration>
    <configuration name="docker-compose.yml: Compose Deployment (2)" type="docker-deploy" factoryName="docker-compose.yml" temporary="true" server-name="Docker Remote">
      <deployment type="docker-compose.yml">
        <settings>
          <option name="sourceFilePath" value="docker-compose.yml" />
        </settings>
      </deployment>
      <method v="2" />
    </configuration>
    <configuration name="docker-compose.yml: Compose Deployment" type="docker-deploy" factoryName="docker-compose.yml" temporary="true" server-name="Docker2">
      <deployment type="docker-compose.yml">
        <settings>
          <option name="sourceFilePath" value="docker-compose.yml" />
        </settings>
      </deployment>
      <method v="2" />
    </configuration>
    <configuration name="docker-compose.yml.certbot: Compose Deployment" type="docker-deploy" factoryName="docker-compose.yml" temporary="true" server-name="Delion Server">
      <deployment type="docker-compose.yml">
        <settings>
          <option name="services">
            <list>
              <option value="certbot" />
            </list>
          </option>
          <option name="sourceFilePath" value="docker-compose.yml" />
        </settings>
      </deployment>
      <method v="2" />
    </configuration>
    <configuration name="docker-compose.yml.nginx: Compose Deployment" type="docker-deploy" factoryName="docker-compose.yml" temporary="true" server-name="Delion Server">
      <deployment type="docker-compose.yml">
        <settings>
          <option name="services">
            <list>
              <option value="nginx" />
            </list>
          </option>
          <option name="sourceFilePath" value="docker-compose.yml" />
        </settings>
      </deployment>
      <method v="2" />
    </configuration>
    <list>
      <item itemvalue="Docker.Proda" />
      <item itemvalue="Docker.docker-compose.yml.certbot: Compose Deployment" />
      <item itemvalue="Docker.docker-compose.yml.nginx: Compose Deployment" />
      <item itemvalue="Docker.docker-compose.yml: Compose Deployment" />
      <item itemvalue="Docker.docker-compose.yml: Compose Deployment (1)" />
      <item itemvalue="Docker.docker-compose.yml: Compose Deployment (2)" />
      <item itemvalue="Node.js.Unnamed" />
      <item itemvalue="Spring Boot.UkrDamageReportApplication" />
    </list>
    <recent_temporary>
      <list>
        <item itemvalue="Docker.docker-compose.yml: Compose Deployment (2)" />
        <item itemvalue="Docker.docker-compose.yml.nginx: Compose Deployment" />
        <item itemvalue="Docker.docker-compose.yml: Compose Deployment (1)" />
        <item itemvalue="Docker.docker-compose.yml: Compose Deployment" />
        <item itemvalue="Docker.docker-compose.yml.certbot: Compose Deployment" />
      </list>
    </recent_temporary>
  </component>
  <component name="SharedIndexes">
    <attachedChunks>
      <set>
        <option value="bundled-jdk-9823dce3aa75-fbdcb00ec9e3-intellij.indexing.shared.core-IU-251.23774.435" />
        <option value="bundled-js-predefined-d6986cc7102b-f27c65a3e318-JavaScript-IU-251.23774.435" />
      </set>
    </attachedChunks>
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="1efa4fc1-ed94-4f01-9436-7b91c4b64be2" name="Changes" comment="" />
      <created>1745682753108</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1745682753108</updated>
      <workItem from="1745682754204" duration="32245000" />
    </task>
    <task id="LOCAL-00001" summary="Integrate search engine api.&#10;added test controller *SerperController*">
      <option name="closed" value="true" />
      <created>1745685802820</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1745685802820</updated>
    </task>
    <option name="localTasksCounter" value="2" />
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
    <option name="exactExcludedFiles">
      <list>
        <option value="$PROJECT_DIR$/client/src/app/api/proxy/places/[regionId]/route.js" />
      </list>
    </option>
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="Integrate search engine api.&#10;added test controller *SerperController*" />
    <option name="LAST_COMMIT_MESSAGE" value="Integrate search engine api.&#10;added test controller *SerperController*" />
  </component>
</project>